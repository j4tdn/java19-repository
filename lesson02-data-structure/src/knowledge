Primitive Type (KDL nguyên thuỷ)
- Dùng để lưu trữ dữ liệu đơn 
- Sử dụng kiểu dữ liệu có sẵn của JAVA
- Giá trị lưu trữ ở vùng nhớ STACK 
	VD: số nguyên, số thực, ký tự
	--> int: số nguyên  --> 4 bytes = 32 bits
						--> [MIN, MAX]: [-2^(n-1), 2^(n-1) - 1]
	 	float,
	 	char,...
	 	
Object type (KDL đối tượng)
+ dùng để lưu trữ dữ liệu (đơn, đa)
+ sử dụng KDL có sẵn của JAVA hoặc tự định nghĩa
	có sẵn: Integer, Character, Float, String, Boolean, Date, Time
	
	tự định nghĩa: Item(id, name, price)
	--> C1: Khởi tạo giá trị (đối tượng) --> dùng từ khoá new
	--> gọi hàm khởi tạo
	hoặc C2: không cần new mà có thể gán trực tiếp --> heap --> constant pool
+ giá trị lưu trữ ở vùng nhớ HEAP
	VD: Khai báo KDL Item: id, name, price,...
	Giá trị của ô nhớ mà Item trỏ đến phải luôn
	có 3 giá trị cho id, name, price
	
=> Phân biệt int, Integer?
Giống nhau:
	Lưu trữ
Khác nhau:
	int: luôn luôn có giá trị
			không hỗ trợ hàm
	Integer: có thể lưu giá trị hoặc không (null)
			hỗ trợ các hàm tiện ích min, max, parse, abs
	
=======================


--> khai báo biến, hàm (cơ bản)
--> Nhập dữ liệu, random

--> Xử lý chức năng
	- Cấu trúc điều kiện, vòng lặp

--> chức năng --> nhập vào tham số là 1 dẫy(tập) các số nguyên N
-->testing: 100 số -- th1: nhập từng số
                      th2: lấy sữ liệu ngẫu nhiên
                        --> Code đoạn code để tạo ra 100 số ngẫu nhiên

+ if if else else if
+ tenary operator --> toán tử 3 ngôi
+ switch case --> if else ==
 	+ break: switch case có break, thoát khỏi switch case khi gặp break
 	+ non-break: sau khi switch đúng case đầu tiên thì nó nhảy vào body
 	của các case tiêos theo bên dưới mà ko cần kiểm tra điều kiện
 	--> kết thúc khi gặp break hoặc xong phần dèfaut
 
+duyệt:
	.for -> duyệt mảng, danh sách
	.while -> code logic
	.do while -> code logic, tối thiểu thực hiện do 1 lần
	
	
	
	
	